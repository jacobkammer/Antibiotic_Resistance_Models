2024-08-28

1. Change y axis to log scale - done
2. Start drug dosing 48 hours after infection begins - done
3. Change drug from vanco to linezolid after 4 days - done
4. rewrite parameters for death rate sensitive and resistant to be defined by a vector that changes the value from zero in the first 48 hours in the vancomycin model to values > zero
5. Linezolid model almost complete.  functions for both parameter values created.  12 hours delay after discontinuing vancomycin before linezolid started
6. Need to change initial concentrations to reflect the bacterial count at the end of the vancomycin model


01/27/2025
Vancomycin serum concentrations:
reference range for vancomycin trough levels is 5-15 mcg/mL
reference range for vancomycin peak levels is 20-40 mcg/mL


This line represents the pharmacokinetic (PK) equation for linezolid concentration over time after each dose. Let me break it down:

linez[idx:] - This is the array of linezolid concentrations from time point idx onwards
linez_conc - This is the initial concentration after a dose (dose/volume)
np.exp(-ke_linez * (t[idx:] - t[idx])) - This is the exponential decay function where:
ke_linez is the elimination rate constant (calculated from half-life)
t[idx:] - t[idx] creates an array of time differences from the dosing time
The exponential decay follows first-order kinetics: C(t) = Câ‚€ * e^(-kt)
The += means we're adding this new dose on top of any existing drug concentration. This allows for accumulation when doses are given before the previous dose is fully eliminated.

# If we have:
idx = 10  # dose given at t=10h
ke = 0.2  # elimination rate
C0 = 100  # initial concentration

# Then t[idx:] - t[idx] creates time differences like:
# [0, 1, 2, 3, 4, ...] hours since dose

# And np.exp(-ke * (t[idx:] - t[idx])) creates:
# [1, 0.82, 0.67, 0.55, 0.45, ...] (decay factors)

# So C0 * np.exp(-ke * (t[idx:] - t[idx])) gives:
# [100, 82, 67, 55, 45, ...] (concentration over time)

Time (h):  0   6   12   18   24
Dose 1:   100  45   20   9    4
Dose 2:    0  100   45   20   9
Dose 3:    0    0   100  45   20
Total:   100  145  165  74   33

code comments
 
In this code, dose_mask is a boolean array (mask) that identifies which time points occur after a specific dose is administered:

How dose_mask Works:
Boolean Filtering Array:

dose_mask = t >= dose_time

This creates an array of True/False values with the same shape as the time array t.
True for time points that are at or after the current dose time
False for time points before the dose time

Purpose: It's used to apply the drug concentration calculation only to the relevant portion of the time array (the times after each dose).
Application:

concentrations[dose_mask] += (dose / volume) * np.exp(-ke * (t[dose_mask] - dose_time))
This adds the concentration contribution from the current dose only to time points at or after the dose is given.